substitutions:
  device_name: "GREE FHBQ-3,5-D"

esphome:
  name: gree-fhbq-35

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name}"
    password: !secret wifi_password

captive_portal:
    

# Настройки UART для RS485
uart:
  id: mod_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
  stop_bits: 1
  data_bits: 8

# Modbus конфигурация
modbus:
  id: modbus_erv
  uart_id: mod_bus
  send_wait_time: 200ms

modbus_controller:
  - id: modbus_controller_erv
    modbus_id: modbus_erv
    address: 0x1
    setup_priority: -10
    update_interval: 15s

# Настройка регистров
sensor:
  # Чтение текущей влажности (Word 13)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_erv
    name: "Текущая влажность"
    id: actual_humidity
    address: 13
    icon: "mdi:water-percent"
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${device_name} - IP Address"
    ssid:
      name: "${device_name} - Wi-Fi SSID"
    bssid:
      name: "${device_name} - Wi-Fi BSSID"
  - platform: version
    name: "${device_name} - ESPHome Version"
    hide_timestamp: true  
  # Чтение скорости вентилятора (Word 8)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_erv
    id: fan_speed
    register_type: holding
    address: 8
    raw_encode: HEXBYTES
    icon: "mdi:fan"
    name: "Скорость вентилятора"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Low");
        case 1: return std::string("Medium");
        case 2: return std::string("High");
        default: return std::string("Unknown");
      }
      return x;
  # Чтение текущего режима (Word 5)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_erv
    id: mode_status
    register_type: holding
    address: 5
    raw_encode: HEXBYTES
    icon: "mdi:cog"
    name: "Режим работы"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Automatic");
        case 1: return std::string("Bypass");
        case 2: return std::string("Heat Exchange");
        default: return std::string("Unknown");
      }
      return x;
  # Чтение текущего режима работы вентилятора (Word 7)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_erv
    id: fam_mode
    register_type: holding
    address: 7
    raw_encode: HEXBYTES
    icon: "mdi:fan"
    name: "Режим вентилятора"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Half-and-Half");
        case 1: return std::string("Exhaust");
        case 2: return std::string("Supply");
        default: return std::string("Unknown");
      }
      return x;
select:
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_erv
    id: mode
    name: "Режим работы"
    address: 5
    value_type: U_WORD
    entity_category: config
    icon: "mdi:cog"
    optionsmap:
      "Automatic": 0
      "Bypass": 1
      "Heat Exchange": 2
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_erv
    id: fan
    name: "Скорость вентилятора"
    address: 8
    value_type: U_WORD
    entity_category: config
    icon: "mdi:fan"
    optionsmap:
      "Low": 0
      "Medium": 1
      "High": 2
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_erv
    id: fan_mode
    name: "Режим вентилятора"
    address: 7
    value_type: U_WORD
    entity_category: config
    icon: "mdi:fan"
    optionsmap:
      "Half-and-Half <->": 0
      "Exhaust ->": 1
      "Supply <-": 2
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_erv
    name: "Питание"
    address: 4
    value_type: U_WORD
    icon: "mdi:power"
    optionsmap:
      "ON": 0xAA
      "OFF": 0x55
    use_write_multiple: true
